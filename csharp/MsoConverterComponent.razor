@* Example Blazor component for MSO conversion *@
@using MsoRewConverter
@using MsoRewConverter.Blazor
@inject IJSRuntime JSRuntime

<div class="mso-converter">
    <h3>MSO to Storm Audio Converter</h3>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>MSO Filter Content</h5>
                </div>
                <div class="card-body">
                    <textarea @bind="msoContent" 
                              @bind:event="oninput"
                              @onchange="ValidateContent"
                              class="form-control" 
                              rows="15" 
                              placeholder="Paste your MSO filter content here..."></textarea>
                    
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-warning mt-2">
                            @validationMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Conversion Options</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Equalizer Name</label>
                        <input @bind="options.EqualiserName" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Q Value Type</label>
                        <select @bind="options.QType" class="form-select">
                            <option value="@QValueType.RBJ">RBJ (Recommended)</option>
                            <option value="@QValueType.Classic">Classic</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input @bind="options.CombineShared" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">
                                Combine Shared Filters
                            </label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Include Filter Types</label>
                        <div class="form-check">
                            <input @bind="options.IncludeParametricEQ" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">Parametric EQ</label>
                        </div>
                        <div class="form-check">
                            <input @bind="options.IncludeAllPass" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">All-Pass Filters</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Exclude Filter Types</label>
                        <div class="form-check">
                            <input @bind="options.ExcludeGainBlock" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">Gain Block</label>
                        </div>
                        <div class="form-check">
                            <input @bind="options.ExcludeDelayBlock" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">Delay Block</label>
                        </div>
                    </div>

                    <button @onclick="ConvertMso" 
                            class="btn btn-primary w-100" 
                            disabled="@(isConverting || string.IsNullOrWhiteSpace(msoContent))">
                        @if (isConverting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Convert MSO
                    </button>

                    @if (preview != null)
                    {
                        <div class="alert alert-info mt-3">
                            <strong>Preview:</strong><br />
                            Channels: @preview.ChannelCount<br />
                            Total Filters: @preview.TotalFilters<br />
                            Shared Filters: @(preview.HasSharedFilters ? "Yes" : "No")
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (conversionResult != null)
    {
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Conversion Results</h5>
                <button @onclick="DownloadAllFiles" class="btn btn-success btn-sm">
                    Download All Files
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Generated Files</h6>
                        <div class="list-group">
                            @foreach (var file in conversionResult.GetDownloadFiles())
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@file.FileName</span>
                                    <button @onclick="() => DownloadFile(file)" class="btn btn-outline-primary btn-sm">
                                        Download
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Processing Log</h6>
                        <pre class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">@conversionResult.GetFormattedLog()</pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string msoContent = string.Empty;
    private string validationMessage = string.Empty;
    private ConversionOptionsUI options = new();
    private MsoConversionService conversionService = new();
    private ConversionResult? conversionResult;
    private ConversionPreview? preview;
    private bool isConverting = false;

    protected override void OnInitialized()
    {
        // Load saved options from localStorage if available
        LoadSavedOptions();
    }

    private async Task ValidateContent()
    {
        if (string.IsNullOrWhiteSpace(msoContent))
        {
            validationMessage = string.Empty;
            preview = null;
            return;
        }

        var validation = conversionService.ValidateMsoContent(msoContent);
        validationMessage = validation.IsValid ? string.Empty : validation.ErrorMessage ?? string.Empty;

        if (validation.IsValid)
        {
            preview = conversionService.GetConversionPreview(msoContent, options);
        }
        else
        {
            preview = null;
        }
    }

    private async Task ConvertMso()
    {
        if (string.IsNullOrWhiteSpace(msoContent))
            return;

        isConverting = true;
        StateHasChanged();

        try
        {
            await Task.Delay(100); // Small delay to show loading state
            conversionResult = conversionService.ConvertMso(msoContent, options);
            
            // Save options to localStorage
            await SaveOptions();
        }
        finally
        {
            isConverting = false;
            StateHasChanged();
        }
    }

    private async Task DownloadFile(FileDownloadInfo file)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(file.Content);
        var base64 = Convert.ToBase64String(bytes);
        
        await JSRuntime.InvokeVoidAsync("downloadFile", file.FileName, base64, file.MimeType);
    }

    private async Task DownloadAllFiles()
    {
        if (conversionResult == null) return;

        var files = conversionResult.GetDownloadFiles();
        foreach (var file in files)
        {
            await DownloadFile(file);
            await Task.Delay(100); // Small delay between downloads
        }
    }

    private async Task SaveOptions()
    {
        try
        {
            var json = conversionService.SerializeOptions(options);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "msoConverterOptions", json);
        }
        catch
        {
            // Ignore localStorage errors
        }
    }

    private async void LoadSavedOptions()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "msoConverterOptions");
            if (!string.IsNullOrEmpty(json))
            {
                var savedOptions = conversionService.DeserializeOptions(json);
                if (savedOptions != null)
                {
                    options = savedOptions;
                    StateHasChanged();
                }
            }
        }
        catch
        {
            // Ignore localStorage errors
        }
    }
}

<script>
    window.downloadFile = (filename, base64Content, mimeType) => {
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', `data:${mimeType};base64,${base64Content}`);
        linkElement.setAttribute('download', filename);
        linkElement.style.display = 'none';
        document.body.appendChild(linkElement);
        linkElement.click();
        document.body.removeChild(linkElement);
    };
</script>

<style>
    .mso-converter {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e0e0e0;
    }

    pre {
        font-size: 0.875rem;
        border-radius: 0.375rem;
    }

    .list-group-item {
        border: 1px solid #e0e0e0;
    }

    .alert {
        border-radius: 0.375rem;
    }

    .btn {
        border-radius: 0.375rem;
    }

    .form-control, .form-select {
        border-radius: 0.375rem;
    }
</style>
